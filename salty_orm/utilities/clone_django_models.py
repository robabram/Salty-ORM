#
# This file is subject to the terms and conditions defined in the
# file 'LICENSE', which is part of this source code package.
#
# Copyright (c) 2018 Robert Abram - All Rights Reserved.
#
# Description : Loop through all the django app models and create a model
# file for use with the Salty-ORM.
#
#
import argparse
import datetime
import gettext
import logging
import os
import sys

import django
from django.apps import apps as global_apps

_logger = logging.getLogger(__name__)

progname = 'clone_django_models'


def setup_unicode():
    """
    Enable unicode support for python programs
    """
    # Setup i18n - Good for 2.x and 3.x python.
    kwargs = {}
    if sys.version_info[0] < 3:
        kwargs['unicode'] = True
    gettext.install('sys_update', **kwargs)


def clone_models(apps, project, app_folder, out_file):
    """
    Scan the app folder for Django models and write them to the file
    given in the 'out_file' parameter.
    :param apps: Django folder to scan for Models.
    :param project: Django project name.
    :param app_folder: Location of the Django apps to scan.
    :param out_file: File to write the newly created Salty-ORM models.
    """

    path_list = [x[0] for x in os.walk(os.path.join(os.getcwd(), app_folder))]

    field_mappings = {
        'AutoField': 'int',
        'OneToOneField': 'int',
        'BooleanField': 'int',
        'CharField': 'str',
        'IntegerField': 'int',
        'DateTimeField': 'datetime',
        'BigAutoField': 'int',
        'GenericIPAddressField': 'str',
        'PositiveIntegerField': 'str',
        'BigIntegerField': 'int',
        'DateField': 'date',
        'UUIDField': 'str',
        'ForeignKey': 'int',
        'FloatField': 'float',
        'SmallIntegerField': 'int',
        'PositiveSmallIntegerField': 'int',
    }

    unknown_field_types = list()

    app_list = []
    for path in path_list:
        if os.path.exists(os.path.join(path, 'models.py')):
            app_list.append(os.path.basename(path))

    app_list.sort()

    with open(out_file, 'w') as handle:

        handle.write("""#
# File last generated by clone_django_models.py on {0}
# 
# !!! Do not edit this file, re-run clone_django_models.py !!!
#

from datetime import datetime, date
from salty_orm.db.query import BaseUtilityModel    
    """.format(datetime.datetime.now().isoformat()))

        for name in app_list:

            handle.write('\n\n# -- Begin app.{0} models -- #\n'.format(name))

            app_models = apps.get_app_config(name).get_models()
            first = True

            for model in app_models:

                if first is True:
                    first = False
                else:
                    handle.write('\n\n')

                handle.write('class {0}(BaseUtilityModel):\n    """ {1}.apps.{2}.models.{0} """\n'.
                             format(model._meta.object_name, project, name))

                # print('Model: {0}, Table: {1}'.format(model._meta.object_name, model._meta.db_table))

                for field in model._meta.fields:

                    if field.name in ('id', 'created', 'modified'):  # BaseModel fields
                        continue

                    internal_type = field.get_internal_type()

                    # For debugging unknown field mappings
                    if internal_type in field_mappings:
                        mapping = field_mappings[internal_type]
                    else:
                        mapping = 'unknown'
                        if internal_type not in unknown_field_types:
                            unknown_field_types.append(internal_type)

                    name = field.name

                    if hasattr(field, 'attname'):  # OneToOneField
                        name = field.attname
                    if hasattr(field, 'alt_name'):
                        name = field.alt_name

                    handle.write('    {0} = None  # type: {1}\n'.format(name, mapping))
                    # print('   Field: {0}, Type: {1}, Map: {2}'.format(field.name, field.get_internal_type(), mapping))

                handle.write("\n    class Meta:\n        db_table = '{0}'\n".format(model._meta.db_table))

            handle.write('# -- End app.{0} models -- #\n'.format(name))

    if len(unknown_field_types) > 0:
        _logger.warning('{0}: missing field type mapping(s) found: {1}'.format(progname, unknown_field_types))

    # for model in apps.all_models['monitor']:
    #     print(model)


def run():

    # Setup logging
    if '--debug' in sys.argv:
        logging.basicConfig(filename=os.devnull, datefmt='%Y-%m-%d %H:%M:%S', level=logging.DEBUG)
    else:
        logging.basicConfig(filename=os.devnull, datefmt='%Y-%m-%d %H:%M:%S', level=logging.INFO)
    handler = logging.StreamHandler(sys.stdout)
    _logger.addHandler(handler)

    setup_unicode()

    # Setup program arguments.
    parser = argparse.ArgumentParser(prog=progname)
    parser.add_argument('root_dir', help=_('Location of Django project root directory'), type=str)
    parser.add_argument('apps_dir', help=_('Location of Django Apps directory'), type=str, default='apps')  #noqa
    parser.add_argument('out_file', help=_('Location to write cloned models'), type=str)  # noqa
    parser.add_argument('--debug', help=_('Enable debug output'), default=False, action='store_true')  # noqa

    args = parser.parse_args()

    if os.environ.get('DJANGO_SETTINGS_MODULE') is None:
        _logger.error('{0}: DJANGO_SETTINGS_MODULE must be set before running.'.format(progname))
        return 1

    _logger.info('{0}: DSM: {1}'.format(progname, os.environ.get('DJANGO_SETTINGS_MODULE')))

    if not os.path.exists(args.root_dir):
        _logger.error('{0}: django project path is invalid {1}'.format(progname, args.root_dir))
        return 2

    if not os.path.exists(args.apps_dir):
        _logger.error('{0}: django apps path is invalid'.format(progname))
        return 2

    cwd = os.getcwd()
    os.chdir(args.root_dir)

    try:
        django.setup()
    except Exception as e:

        _logger.error('{0}: django application failed to initialize ({1})'.format(progname, e))
        os.chdir(cwd)
        return 3

    try:
        _logger.info('{0}: cloning models...'.format(progname))
        clone_models(global_apps, os.path.basename(args.root_dir), args.apps_dir, args.out_file)
    except Exception as e:
        _logger.error('{0}: error: ({1})'.format(progname, e))
        os.chdir(cwd)
        return 4

    _logger.info('{0}: done'.format(progname))

    os.chdir(cwd)

    return 0


# --- Main Program Call ---
if __name__ == '__main__':
    sys.exit(run())
